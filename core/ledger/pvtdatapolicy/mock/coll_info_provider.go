// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric-protos-go/peer"
)

type CollectionInfoProvider struct {
	ExplicitCollectionInfoStub        func(string, string) (*peer.StaticCollectionConfig, error)
	explicitCollectionInfoMutex       sync.RWMutex
	explicitCollectionInfoArgsForCall []struct {
		arg1 string
		arg2 string
	}
	explicitCollectionInfoReturns struct {
		result1 *peer.StaticCollectionConfig
		result2 error
	}
	explicitCollectionInfoReturnsOnCall map[int]struct {
		result1 *peer.StaticCollectionConfig
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CollectionInfoProvider) ExplicitCollectionInfo(arg1 string, arg2 string) (*peer.StaticCollectionConfig, error) {
	fake.explicitCollectionInfoMutex.Lock()
	ret, specificReturn := fake.explicitCollectionInfoReturnsOnCall[len(fake.explicitCollectionInfoArgsForCall)]
	fake.explicitCollectionInfoArgsForCall = append(fake.explicitCollectionInfoArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ExplicitCollectionInfo", []interface{}{arg1, arg2})
	fake.explicitCollectionInfoMutex.Unlock()
	if fake.ExplicitCollectionInfoStub != nil {
		return fake.ExplicitCollectionInfoStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.explicitCollectionInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CollectionInfoProvider) ExplicitCollectionInfoCallCount() int {
	fake.explicitCollectionInfoMutex.RLock()
	defer fake.explicitCollectionInfoMutex.RUnlock()
	return len(fake.explicitCollectionInfoArgsForCall)
}

func (fake *CollectionInfoProvider) ExplicitCollectionInfoCalls(stub func(string, string) (*peer.StaticCollectionConfig, error)) {
	fake.explicitCollectionInfoMutex.Lock()
	defer fake.explicitCollectionInfoMutex.Unlock()
	fake.ExplicitCollectionInfoStub = stub
}

func (fake *CollectionInfoProvider) ExplicitCollectionInfoArgsForCall(i int) (string, string) {
	fake.explicitCollectionInfoMutex.RLock()
	defer fake.explicitCollectionInfoMutex.RUnlock()
	argsForCall := fake.explicitCollectionInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CollectionInfoProvider) ExplicitCollectionInfoReturns(result1 *peer.StaticCollectionConfig, result2 error) {
	fake.explicitCollectionInfoMutex.Lock()
	defer fake.explicitCollectionInfoMutex.Unlock()
	fake.ExplicitCollectionInfoStub = nil
	fake.explicitCollectionInfoReturns = struct {
		result1 *peer.StaticCollectionConfig
		result2 error
	}{result1, result2}
}

func (fake *CollectionInfoProvider) ExplicitCollectionInfoReturnsOnCall(i int, result1 *peer.StaticCollectionConfig, result2 error) {
	fake.explicitCollectionInfoMutex.Lock()
	defer fake.explicitCollectionInfoMutex.Unlock()
	fake.ExplicitCollectionInfoStub = nil
	if fake.explicitCollectionInfoReturnsOnCall == nil {
		fake.explicitCollectionInfoReturnsOnCall = make(map[int]struct {
			result1 *peer.StaticCollectionConfig
			result2 error
		})
	}
	fake.explicitCollectionInfoReturnsOnCall[i] = struct {
		result1 *peer.StaticCollectionConfig
		result2 error
	}{result1, result2}
}

func (fake *CollectionInfoProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.explicitCollectionInfoMutex.RLock()
	defer fake.explicitCollectionInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CollectionInfoProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
